services:
  test_cdc_commerce_postgres:
    container_name: test-source-db
    image: debezium/postgres:13-alpine
    hostname: ${TEST_POSTGRES_HOST}
    ports:
      - 15432:5432
    environment:
      POSTGRES_USER: ${TEST_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      POSTGRES_DB: ${TEST_POSTGRES_DB}
    volumes:
      - "./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql"
      - "./test_psql_vol:/var/lib/postgresql/data:rw"
    networks:
      - my_test_network

  test_suite:
    build: 
      context: ./tests
      dockerfile: ./test_Dockerfile
    image: cdc-test-suite
    container_name: test_suite
    restart: on-failure
    volumes:
      - "./tests:/test_app/tests/"
    environment:
      TEST_POSTGRES_USER: ${TEST_POSTGRES_USER}
      TEST_POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      TEST_POSTGRES_DB: ${TEST_POSTGRES_DB}
      TEST_POSTGRES_HOST: ${TEST_POSTGRES_HOST}
      DB_SCHEMA: ${TEST_DB_SCHEMA}
    depends_on:
      - test_cdc_commerce_postgres
    networks:
      - my_test_network

  zookeeper:
    image: debezium/zookeeper:2.4
    container_name: zookeeper
    ports:
      - "12181:12181"
    networks:
      - my_test_network
    
  kafka:
    container_name: kafka
    image: debezium/kafka:latest
    ports:
      - "19093:19093"
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181 # changing the port to other than 2181 doesn't work.
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=LISTENER_INT://kafka:9092,LISTENER_EXT://localhost:19093 #kafka:9092 is important. It takes docker hostname `kafka` and the port. 
      - KAFKA_LISTENERS=LISTENER_INT://kafka:9092,LISTENER_EXT://0.0.0.0:19093
      - KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INT
    depends_on:
      - zookeeper
    networks:
      - my_test_network
  
  test-debezium-connect:
    container_name: test_debezium_connect
    build: ./sink-connector
    image: dbz-kafka-connects
    ports:
      - "18083:8083" # 8083 is a must. Otherwise no POST goes through
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092 #kafka:9092 is important. It takes docker hostname `kafka` and the port. 
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
    depends_on:
      - zookeeper
      - kafka
    networks:
      - my_test_network

  test_minio:
    image: minio/minio:RELEASE.2022-05-26T05-48-41Z
    hostname: minio
    container_name: test_minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - "./test_minio/data:/data"
    environment:
      MINIO_ROOT_USER: ${TEST_AWS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${TEST_AWS_SECRET_KEY}
    command: [ "server", "/data", "--console-address", ":9001" ]
    networks:
      - my_test_network

  createbuckets:
    image: minio/mc
    container_name: createbuckets
    depends_on:
      - test_minio
    entrypoint: >
      /bin/sh -c " sleep 3; 
      /usr/bin/mc config host add myminio http://minio:9000 ${TEST_AWS_KEY_ID} ${TEST_AWS_SECRET_KEY}; 
      sleep 1; 
      /usr/bin/mc rm -r --force myminio/commerce; 
      /usr/bin/mc mb myminio/commerce;
      /usr/bin/mc anonymous set download myminio/commerce; 
      /usr/bin/mc anonymous set public myminio/commerce; 
      exit 0; "
    networks:
      - my_test_network

networks:
  my_test_network:
